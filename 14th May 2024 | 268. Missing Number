class Solution {

private: 
    int dfs(vector<vector<int>>& grid, int i , int j ) {
        
        if( i >= grid.size() || j >= grid[0].size() || i < 0 || j <0) 
            return 0 ; 
        
        if(grid[i][j] == 0) return 0 ; 

        int temp = grid[i][j]; 
        grid[i][j] = 0 ; 

        int c1 = dfs(grid,i+1 ,j);
        int c2 = dfs(grid,i-1 ,j);
        int c3 = dfs(grid,i, j+1);
        int c4 = dfs(grid,i, j-1);

        int ans = temp + max(c1,max(c2,max(c3,c4)));

        grid[i][j] = temp ; 

        return ans ; 
    }
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        
        int ans = 0; 
        
        for(int i = 0 ; i<grid.size() ; i++) {
            for(int j = 0 ; j<grid[0].size() ; j++) {
                if(grid[i][j] != 0) {
                    ans = max(ans,dfs(grid,i,j)); 
                }
            }
        }

        return ans; 
    }
};
