class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage,
                                int k) {

        priority_queue<int> pq;
        vector<pair<double, int>> vec;

        for (int i = 0; i < quality.size(); i++) {
            vec.push_back({(1.0 * wage[i]) / quality[i], i});
        }

        sort(begin(vec), end(vec));

        int qualitySum = 0;
        double maxRatio = 0.0;
        double ans = 0.0;

        for (int i = 0; i < k; i++) {
            qualitySum += quality[vec[i].second];
            maxRatio = vec[i].first;
            pq.push(quality[vec[i].second]);
        }

        ans = qualitySum * maxRatio;

        for (int i = k; i < vec.size(); i++) {
            maxRatio = vec[i].first;
            qualitySum -= pq.top();
            qualitySum += quality[vec[i].second];
            ans = min(ans, qualitySum * maxRatio);
            pq.pop();
            pq.push(quality[vec[i].second]);
        }

        return ans;
    }
};
