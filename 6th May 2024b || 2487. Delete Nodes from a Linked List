class Solution {

private: 
    ListNode* reverseList(ListNode* head) {
        
        if(head == nullptr || head -> next == nullptr) return head; 
        
        
        ListNode * prev = nullptr;
        ListNode * curr = head; 
        ListNode * agla = head -> next; 
        
        while(agla != nullptr) {
            curr ->next = prev ; 
            prev = curr; 
            curr = agla; 
            if(agla != nullptr)
                agla = curr -> next; 
        }
        
        curr -> next = prev; 
        
        return curr; 
    }

public:

    //reversing linked list method 
    ListNode* removeNodes(ListNode* head) {
        head = reverseList(head);

        ListNode * temp = head ; 

        while(temp -> next != nullptr) {
            if(temp -> next -> val < temp -> val) {
                temp -> next = temp -> next -> next; 
            }
            else {
                temp = temp -> next; 
            }
        } 

        return (reverseList(head)); 

        
    }

    // stack method 
    // ListNode* removeNodes(ListNode* head) {
        
        

    //     stack<ListNode*> s ; 

    //     ListNode* temp = head ; 

    //     while(temp != nullptr) {

    //         while (!s.empty() && s.top()-> val < temp->val){
    //             s.pop(); 
    //         }
    //         s.push(temp); 
    //         temp = temp -> next; 
    //     }

    //     ListNode * ans = nullptr; 

    //     while(!s.empty()) {
    //         ListNode * newHead = s.top(); 
    //         s.pop();

    //         newHead -> next = ans; 
    //         ans = newHead; 
    //     }

    //     return ans; 

    // }
};
