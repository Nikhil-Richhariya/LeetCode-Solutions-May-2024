/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
private:
    pair<int, int> helper(TreeNode* root) {
        pair<int, int> p = {0, 0};

        if (root == nullptr) {
            return p;
        }

        pair<int, int> left = helper(root->left);
        pair<int, int> right = helper(root->right);
        p.first = 1 + left.first + right.first;
        p.second = root->val + left.second + right.second;

        return p;
    }

    int requirement(pair<int, int> p) { return p.second - p.first; }

public:
    int distributeCoins(TreeNode* root) {

        if (root == nullptr) {
            return 0;
        }

        if (root->left == nullptr && root->right == nullptr)
            return 0;

        pair<int, int> left = helper(root->left);
        pair<int, int> right = helper(root->right);

        int leftRqd = 0;

        if (root->left) {

            leftRqd = requirement(left);
            if (leftRqd < 0) {
                root->left->val += abs(leftRqd);
                root->val += leftRqd; // it is -ve (that is minus only )
            } else {
                leftRqd = 0;
            }
        }

        int rightRqd = 0;
        if (root->right) {
            rightRqd = requirement(right);
            if (rightRqd < 0) {
                root->right->val += abs(rightRqd);
                root->val += rightRqd; // -ve ko add kr rhe
            } else {
                rightRqd = 0;
            }
        }

        left = helper(root->left);
        right = helper(root->right);

        int rootRqd = 0;
        if (root->val <= 0) {
            if (root->left && requirement(left) > 0) {
                root->val += requirement(left);
                rootRqd += requirement(left);
                root->left->val -= requirement(left);
            }
            if (root->right && requirement(right) > 0) {
                root->val += requirement(right);
                rootRqd += requirement(right);
                root->right->val -= requirement(right);
            }
        }

        return abs(leftRqd) + abs(rootRqd) + abs(rightRqd) +
               distributeCoins(root->left) + distributeCoins(root->right);
    }
};
